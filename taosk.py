import tkinter as tk
from tkinter import messagebox
import json
import sqlite3
from datetime import datetime
import requests
import Giaodienchinh  

EVENTS_FILE = 'events.json'
DB_FILE = 'events.db'
FLASK_API_URL = "http://localhost:5000/events"  

# üÜï H√†m chuy·ªÉn ƒë·ªïi ng√†y t·ª´ DD/MM/YYYY sang YYYY-MM-DD
def convert_date_format(date_str):
    try:
        return datetime.strptime(date_str, "%d/%m/%Y").strftime("%Y-%m-%d")
    except ValueError:
        return None  # Tr·∫£ v·ªÅ None n·∫øu ng√†y kh√¥ng h·ª£p l·ªá

def check_connection_to_localhost():
    try:
        response = requests.get(FLASK_API_URL)
        return response.status_code == 200
    except requests.exceptions.RequestException:
        return False

def save_event():
    if not check_connection_to_localhost():
        messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi localhost. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c kh·ªüi ƒë·ªông l·∫°i Flask server.")
        return

    event_name = entry_name.get()
    event_date = entry_date.get()
    event_time = entry_time.get()
    event_location = entry_location.get()
    event_description = text_description.get("1.0", tk.END).strip()

    if not event_name or not event_date or not event_time:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·ª± ki·ªán!")
        return

    # üîÑ **Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y tr∆∞·ªõc khi l∆∞u**
    converted_date = convert_date_format(event_date)
    if not converted_date:
        messagebox.showerror("L·ªói", "Ng√†y kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng dd/mm/yyyy.")
        return

    if event_time == "24:00":
        event_time = "00:00"  
    else:
        try:
            datetime.strptime(event_time, "%H:%M")
        except ValueError:
            messagebox.showerror("L·ªói", "Gi·ªù kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng hh:mm.")
            return

    if event_location == "":
        event_location = "ƒê·ªãa ƒëi·ªÉm tr·ªëng"

    event_data = {
        "T√™n s·ª± ki·ªán": event_name,
        "Ng√†y": converted_date,  # üÜï D√πng ng√†y ƒë√£ chuy·ªÉn ƒë·ªïi
        "Th·ªùi gian": event_time,
        "M√¥ t·∫£": event_description,
        "ƒê·ªãa ƒëi·ªÉm": event_location
    }

    save_event_to_db(event_name, converted_date, event_time, event_location, event_description)

    try:
        with open(EVENTS_FILE, "r", encoding="utf-8") as f:
            events = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        events = []

    events.append(event_data)

    with open(EVENTS_FILE, "w", encoding="utf-8") as f:
        json.dump(events, f, ensure_ascii=False, indent=4)

    messagebox.showinfo("Th√†nh c√¥ng", "S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o h·ªá th·ªëng!")
    root.destroy()
    Giaodienchinh.open_main_window()

def save_event_to_db(event_name, event_date, event_time, event_location, event_description):
    """ L∆∞u s·ª± ki·ªán m·ªõi v√†o database SQLite """
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO event (title, date, time, location, description) VALUES (?, ?, ?, ?, ?)",
            (event_name, event_date, event_time, event_location, event_description)
        )
        conn.commit()
        print(f"‚úÖ S·ª± ki·ªán '{event_name}' ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o database!")

def open_create_event_window():
    if not check_connection_to_localhost():
        messagebox.showerror("L·ªói k·∫øt n·ªëi", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn localhost. H√£y ch·∫Øc ch·∫Øn r·∫±ng Flask server ƒëang ch·∫°y.")
        return

    global root, entry_name, entry_date, entry_time, text_description, entry_location

    root = tk.Tk()
    root.title("T·∫°o S·ª± Ki·ªán")
    root.geometry("700x500+400+100")
    root.resizable(False, False)

    tk.Label(root, text="T·∫°o S·ª± Ki·ªán", font=("Arial", 16, "bold")).pack(pady=10)

    frame = tk.Frame(root)
    frame.pack(pady=5)

    tk.Label(frame, text="T√™n s·ª± ki·ªán:", anchor="w").grid(row=0, column=0, sticky="w", padx=5, pady=5)
    entry_name = tk.Entry(frame, width=30)
    entry_name.grid(row=0, column=1, padx=5, pady=7)

    tk.Label(frame, text="Ng√†y (dd/mm/yyyy):", anchor="w").grid(row=1, column=0, sticky="w", padx=5, pady=5)
    entry_date = tk.Entry(frame, width=30)
    entry_date.grid(row=1, column=1, padx=5, pady=7)

    tk.Label(frame, text="Th·ªùi gian (hh:mm):", anchor="w").grid(row=2, column=0, sticky="w", padx=5, pady=5)
    entry_time = tk.Entry(frame, width=30)
    entry_time.grid(row=2, column=1, padx=5, pady=7)

    tk.Label(frame, text="ƒê·ªãa ƒëi·ªÉm:", anchor="w").grid(row=3, column=0, sticky="w", padx=5, pady=5)
    entry_location = tk.Entry(frame, width=30)
    entry_location.grid(row=3, column=1, padx=5, pady=7)

    tk.Label(root, text="M√¥ t·∫£ s·ª± ki·ªán:", anchor="w").pack(pady=5)
    text_description = tk.Text(root, width=40, height=5)
    text_description.pack(padx=10, pady=7)

    button_frame = tk.Frame(root)
    button_frame.pack(pady=10)

    btn_save = tk.Button(button_frame, text="L∆∞u", width=12, command=save_event)
    btn_save.grid(row=0, column=0, padx=5, pady=5)

    btn_back = tk.Button(button_frame, text="Quay l·∫°i", width=12,
                         command=lambda: [root.destroy(), Giaodienchinh.open_main_window()])
    btn_back.grid(row=0, column=1, padx=5, pady=5)

    root.mainloop()

if __name__ == "__main__":
    open_create_event_window()
