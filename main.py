import json
import os
from DangNhap import create_login_window, login_success
import sqlite3
from datetime import datetime
import tkinter as tk
from tkinter import messagebox
import time
import threading
class CustomProgressBar(tk.Frame):
    def __init__(self, master=None, width=200, height=20, **kwargs):
        super().__init__(master, **kwargs)
        
        # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc v√† m√†u s·∫Øc cho thanh ti·∫øn tr√¨nh
        self.width = width
        self.height = height
        self.canvas = tk.Canvas(self, width=self.width, height=self.height, bg="white", highlightthickness=0)
        self.canvas.pack()
        
        # T·∫°o m·ªôt h√¨nh ch·ªØ nh·∫≠t ƒë·∫°i di·ªán cho thanh ti·∫øn tr√¨nh
        self.progress = self.canvas.create_rectangle(0, 0, 0, self.height, fill="blue")


        # Bi·∫øn ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh hi·ªán t·∫°i
        self.current_progress = 0


    def set_progress(self, value):
        # X√°c ƒë·ªãnh ƒë·ªô d√†i c·ªßa thanh ti·∫øn tr√¨nh d·ª±a tr√™n gi√° tr·ªã ƒë·∫ßu v√†o
        width = self.width * (value / 100)
        self.canvas.coords(self.progress, 0, 0, width, self.height)


    def start_progress(self, duration):
        # ƒê·∫∑t l·∫°i ti·∫øn tr√¨nh hi·ªán t·∫°i v·ªÅ 0
        self.current_progress = 0
        # T√≠nh to√°n b∆∞·ªõc ti·∫øn tr√¨nh
        self.step = 100 / (duration * 340 / 100)  # m·ªói 100ms s·∫Ω tƒÉng bao nhi√™u %
        self.update_progress()


    def update_progress(self):
        if self.current_progress < 100:
            # TƒÉng ti·∫øn tr√¨nh hi·ªán t·∫°i v√† c·∫≠p nh·∫≠t giao di·ªán
            self.current_progress += self.step
            self.set_progress(self.current_progress)
            # G·ªçi l·∫°i h√†m n√†y sau 100ms
            self.after(100, self.update_progress)
        else:
            self.set_progress(100)  # ƒê·∫£m b·∫£o thanh ti·∫øn tr√¨nh ƒë·∫ßy ƒë·ªß 100%
            self.close_and_open_main_window()  # ƒê√≥ng c·ª≠a s·ªï loading v√† m·ªü giao di·ªán ch√≠nh

    def close_and_open_main_window(self):
        # ƒê√≥ng c·ª≠a s·ªï hi·ªán t·∫°i
        self.master.destroy()  # Ho·∫∑c self.destroy() n·∫øu c·∫ßn
        # M·ªü giao di·ªán ch√≠nh
        import Giaodienchinh
        Giaodienchinh.open_main_window()



def sync_json_to_db(json_path='events.json', db_path='events.db'):
    """ C·∫≠p nh·∫≠t s·ª± ki·ªán t·ª´ JSON v√†o database nh∆∞ng kh√¥ng x√≥a s·ª± ki·ªán c≈© """
    if not os.path.exists(json_path):
        print(f"‚ùå File '{json_path}' kh√¥ng t·ªìn t·∫°i! Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ƒë·ªìng b·ªô.")
        return

    with open(json_path, "r", encoding="utf-8") as file:
        json_events = json.load(file)

    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()

        # L·∫•y danh s√°ch t·∫•t c·∫£ s·ª± ki·ªán t·ª´ database
        cursor.execute("SELECT id, title, date FROM event")
        db_events = cursor.fetchall()

        json_event_list = [(event["T√™n s·ª± ki·ªán"], event["Ng√†y"]) for event in json_events]
        db_event_titles = {event_title for _, event_title, _ in db_events}

        # üîÑ **Ch·ªâ th√™m s·ª± ki·ªán m·ªõi t·ª´ JSON v√†o database**
        for event in json_events:
            event_title = event["T√™n s·ª± ki·ªán"]
            event_date = event["Ng√†y"]

            if event_title not in db_event_titles:  # N·∫øu s·ª± ki·ªán ch∆∞a c√≥ trong database
                cursor.execute(
                    "INSERT INTO event (title, date) VALUES (?, ?)",
                    (event_title, event_date)
                )
                print(f"‚úÖ Th√™m s·ª± ki·ªán m·ªõi v√†o database: {event_title}")

        conn.commit()
        print("‚úÖ ƒê·ªìng b·ªô h√≥a t·ª´ JSON v√†o database ho√†n t·∫•t! Kh√¥ng x√≥a s·ª± ki·ªán c≈©.")

def xoa_su_kien(title, db_path='events.db', json_path='events.json'):
    """ X√≥a s·ª± ki·ªán kh·ªèi database v√† `events.json` """

    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()

        # üî¥ **X√≥a s·ª± ki·ªán kh·ªèi database**
        cursor.execute("DELETE FROM event WHERE title=?", (title,))
        conn.commit()
        print(f"üóëÔ∏è ƒê√£ x√≥a s·ª± ki·ªán: {title} kh·ªèi database!")

    # üîÑ **X√≥a s·ª± ki·ªán kh·ªèi `events.json`**
    if os.path.exists(json_path):
        with open(json_path, "r", encoding="utf-8") as file:
            events = json.load(file)

        # Ch·ªâ gi·ªØ l·∫°i nh·ªØng s·ª± ki·ªán KH√îNG ph·∫£i s·ª± ki·ªán c·∫ßn x√≥a
        events = [event for event in events if event["T√™n s·ª± ki·ªán"] != title]

        with open(json_path, "w", encoding="utf-8") as file:
            json.dump(events, file, ensure_ascii=False, indent=4)

        print(f"üóëÔ∏è ƒê√£ x√≥a s·ª± ki·ªán: {title} kh·ªèi `events.json`!")

def convert_db_to_json(db_path='events.db', json_path='events.json'):
    column_mapping = {
        "id": "id",
        "title": "T√™n s·ª± ki·ªán",
        "date": "Ng√†y",
        "description": "M√¥ t·∫£",
        "location": "ƒê·ªãa ƒëi·ªÉm",
        "time": "Th·ªùi gian"
    }

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM event")

        columns = [desc[0] for desc in cursor.description]
        rows = cursor.fetchall()

        events = []
        for row in rows:
            event = {}
            for col, val in zip(columns, row):
                new_key = column_mapping.get(col, col)
                if new_key == "Ng√†y" and val:
                    try:
                        date_obj = datetime.fromisoformat(val)
                        val = date_obj.strftime("%Y-%m-%d")
                    except Exception:
                        pass
                event[new_key] = val
            events.append(event)

        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(events, f, ensure_ascii=False, indent=4)

        print(f"‚úÖ Chuy·ªÉn th√†nh c√¥ng {len(events)} s·ª± ki·ªán!")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói: {e}")
    finally:
        conn.close()

# üèó Ki·ªÉm tra ƒëƒÉng nh·∫≠p
def is_logged_in():
    if os.path.exists("session.json"):
        with open("session.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            return data.get("logged_in", False)
    return False

def show_loading_screen():
        # T·∫°o c·ª≠a s·ªï ch√≠nh
    root = tk.Tk()
    root.title("QLSK")


    # T·∫°o v√† hi·ªÉn th·ªã custom progress bar
    progress_bar = CustomProgressBar(root)
    progress_bar.pack(pady=20)
    progress_bar.start_progress(10)


    # Ch·∫°y v√≤ng l·∫∑p ch√≠nh c·ªßa ·ª©ng d·ª•ng
    root.mainloop()

if __name__ == "__main__":
    convert_db_to_json()
    sync_json_to_db()

    if is_logged_in():
        show_loading_screen()
    else:
        create_login_window()
        if login_success:
            print("ƒêƒÉng nh·∫≠p th√†nh c√¥ng, chuy·ªÉn sang giao di·ªán ch√≠nh / ch·ªù 10s")
            show_loading_screen()
        else:
            print("Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c b·ªã sai t√†i kho·∫£n")
